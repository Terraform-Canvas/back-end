name: go Test check

on:
  pull_request:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.19' ]
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
      TEST_ACCESS_TOKEN: ${{ secrets.TEST_ACCESS_TOKEN }}
      TEST_REFRESH_TOKEN: ${{ secrets.TEST_REFRESH_TOKEN }}
      TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Golang with cache
        uses: magnetikonline/action-golang-cache@v4
        with:
          go-version-file: go.mod
      - name: Test with Go
        run: |
          go test -v -timeout 30s -coverprofile=cover.out -cover ./...
          go tool cover -func=cover.out
      # 추후 main 병합시 test 할 부분
#      - name: Run Gosec Security Scanner
#        uses: securego/gosec@master
#        with:
#          args: ./...
#      - name: Check critic
#        run: |
#          go install -v github.com/go-critic/go-critic/cmd/gocritic@latest
#          gocritic check -enableAll ./...
#      - name: golangci-lint
#        uses: golangci/golangci-lint-action@v3
#        with:
#          version: v1.53
